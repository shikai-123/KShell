#include <curl.h>
#include <iostream>
#include <QDebug>
#include <qfile.h>

#include "Log.h"
using namespace std;


/*
@brief 从Ftp服务器拿指定的文件，放到指定的文件地址，Ftp服务器的账户和密码
@param ftpurl：要拿的文件的Ftp地址； filename：存放的地址
@return 返回0正常，返回其他的是错误代码
@note  
严重性	代码	说明	项目	文件	行	禁止显示状态
错误	C1189	#error:  This file was generated by an older version of protoc which is (编译源文件 FTPTreeList.cpp)	CJQTool	d:\c++demo\qtproject\cjqtool\cjqtool\points.pb.h	17

*/
int ftpget(string ftpurl, string user, string passwd, string filename)
{
	int rs = 0;
	char ErrBuff[128] = { 0 };
	FILE* fp = NULL;
	//LogInfo((boost::format("ftp url= %s") % ftpurl).str());//ftp url=  sftp://192.168.100.100//version_lable.dat
	//LogInfo((boost::format("ftp down %s") % filename).str());// D:\c++demo\jzag\jzag\Debug\..\updata\version_lable.dat
	fp = fopen(filename.c_str(), "wb");
	CURL* curl = NULL;
	if (fp)
	{
		rs = curl_global_init(CURL_GLOBAL_ALL);//初始化libcurl
		//函数得到 easy interface型指针;easy interface简单界面
		curl = curl_easy_init();/*curl_easy_init用来初始化一个CURL的指针(有些像返回FILE类型的指针一样). 相应的在调用结束时要用curl_easy_cleanup函数清理.一般curl_easy_init意味着一个会话的开始. 它会返回一个easy_handle(CURL*对象), 一般都用在easy系列的函数中.*/
		string loginstr = user + ":" + passwd;
		rs = curl_easy_setopt(curl, CURLOPT_URL, ftpurl.c_str());//设置传输选项；CURLOPT_URL设置访问URl，ftpurl.data()url的指针；
		if (user.length() > 0)
		{
			rs = curl_easy_setopt(curl, CURLOPT_USERPWD, loginstr.c_str());/*返回0意味一切ok*/
			rs = curl_easy_setopt(curl, CURLOPT_VERBOSE, 1);/*将CURLOPT_VERBOSE属性设置为1，libcurl会输出通信过程中的一些细节。*/
			rs = curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);/*此函数多做数据保存的功能，如处理下载文件。可以通过 CURLOPT_WRITEDATA属性给默认回调函数传递一个已经打开的文件指针，用于将数据输出到文件里。 */
			rs = curl_easy_setopt(curl, CURLOPT_ERRORBUFFER, ErrBuff);/*输出错误到ErrBuff */
			/*
			rs = curl_easy_setopt(curl, CURLOPT_PORT, 21);//指定端口
			LogInfo((boost::format("ftp rs6= %d") % rs).str());
			*/

			/*
						curl_easy_setopt(curl, CURLOPT_FTP_USE_EPSV, 0);
						LogInfo((boost::format("ftp rs8= %d") % rs).str());
			*/
			rs = curl_easy_perform(curl);/*该函数是完成curl_easy_setopt指定的所有选项，返回0意味一切ok*/
			//LogInfo((boost::format("ftp rs6= %d") % rs).str());
			if (rs != CURLE_OK)
			{
				qInfo() << "！！FTP下载错误 =" << curl_easy_strerror((CURLcode)rs)<<ErrBuff;
			}
		}
		fclose(fp);
	}
	else
	{
		//LogError("ftpget open file error");
	}
	if (curl)
	{
		curl_easy_cleanup(curl);
	}
	curl_global_cleanup();//在结束libcurl使用的时候，用来对curl_global_init做的工作清理。类似于close的函数。
	//LogInfo("ftpget get end");
	return rs;
}


/*
@brief 往Ftp服务器上传文件
@param ftpurl：Ftp地址；user：Ftp用户名；passwd：密码； filename：本地文件存放的地址
@return -1打开文件失败，-2文件大小有问题；-3Ftp参数设置有问题；
@note
*/
int ftpput(string ftpurl, string user, string passwd, string filename)
{
	FILE* sendFile = NULL;
	char ErrBuff[128] = { 0 };
	int rs = 0;
	size_t size;
	rs = curl_global_init(CURL_GLOBAL_ALL);
	CURL* curl = curl_easy_init();
	string loginstr = user + ":" + passwd;
	curl_easy_setopt(curl, CURLOPT_URL, ftpurl.data());
	if (user.length() > 0)
	{
		//size = std::size(filename);  
		QFile myFile(filename.c_str());
		if (myFile.open(QIODevice::ReadOnly)){
			size = myFile.size(); 
			myFile.close();
		}
		//size = myFile.size();//文件大小(字节)

		//打开ftp上传的源文件   
		if (NULL == (sendFile = fopen(filename.c_str(), "r")))
		{
			qCritical() << "ftp 上传打开文件错误！";
			rs = -1;
			goto onErr;
		}
		if (size <= 0)
		{
			qCritical() << "ftp 上传文件大小错误! size =" << size;
			rs = -2;
			goto onErr;
		}

		rs = curl_easy_setopt(curl, CURLOPT_USERPWD, loginstr.c_str());
		rs = curl_easy_setopt(curl, CURLOPT_VERBOSE, 1);//打印Ftp的信息会详细
		curl_easy_setopt(curl, CURLOPT_READDATA, sendFile);//设置上传文件的文件指针
		curl_easy_setopt(curl, CURLOPT_UPLOAD, 1);    //设置上传
		curl_easy_setopt(curl, CURLOPT_INFILESIZE, size);//设置上传文件的大小
		curl_easy_setopt(curl, CURLOPT_FTP_CREATE_MISSING_DIRS, 1);  /*远程服务器如果没有这个目录，会自动创建然后上传文件到这个目录下面*/
		rs = curl_easy_setopt(curl, CURLOPT_ERRORBUFFER, ErrBuff);/*输出错误到ErrBuff */
		rs = curl_easy_perform(curl);
		if (rs != CURLE_OK)
		{
			qCritical() << "FTP上传错误" << curl_easy_strerror((CURLcode)rs) << ErrBuff;
			rs = -3;
		}
	}
onErr:
	if (sendFile)
	{
		fclose(sendFile);
	}
	curl_easy_cleanup(curl);
	curl_global_cleanup();
	qInfo() << "ftp upload end";
	return rs;
}
